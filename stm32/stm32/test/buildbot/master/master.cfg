# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("arm-none-eabi", "pass-MonkipofPaj1")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/istarc/stm32.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["build-repo"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["build-repo", "build-local", "utest-repo", "utest-local"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig
import os

f1 = BuildFactory()
f2 = BuildFactory()
f3 = BuildFactory()
f4 = BuildFactory()
c['builders'] = []
homedir = os.environ["HOME"]
# Dirty hack to setup docker environment
if homedir == "/" or homedir == "/root":
	homedir = "/home/admin"

# Test build (remote repo)
f1.addStep(Git(repourl='https://github.com/istarc/stm32.git', mode='incremental', method='clean', submodules=True))
f1.addStep(ShellCommand(command=["git", "submodule", "update", "--init"])) # Initialize git submodules
f1.addStep(ShellCommand(command=["make", "clean"])) # Clean examples
f1.addStep(ShellCommand(command=["make", "-j4"])) # Build examples
c['builders'].append(BuilderConfig(name="build-repo", slavenames=["arm-none-eabi"], factory=f1))

# Test build (local repo)
f2.addStep(ShellCommand(command=["rsync", "-au", homedir+"/stm32/", "."])) # Copy local git folder
f2.addStep(ShellCommand(command=["make", "clean"])) # Clean examples
f2.addStep(ShellCommand(command=["make", "-j4"])) # Build examples
c['builders'].append(BuilderConfig(name="build-local", slavenames=["arm-none-eabi"], factory=f2))

# Unit test (remote repo)
f3.addStep(Git(repourl='https://github.com/istarc/stm32.git', mode='incremental', method='clean', submodules=True))
f3.addStep(ShellCommand(command=["git", "submodule", "update", "--init"])) # Initialize git submodules
f3.addStep(ShellCommand(command=["make", "test-clean"])) # Clean tests
f3.addStep(ShellCommand(command=["make", "check"])) # Build dependencies and test, execute tests
c['builders'].append(BuilderConfig(name="utest-repo", slavenames=["arm-none-eabi"], factory=f3))

# Unit test (local repo)
f4.addStep(ShellCommand(command=["rsync", "-au", homedir+"/stm32/", "."])) # Copy local git folder
f4.addStep(ShellCommand(command=["make", "test-clean"])) # Clean tests
f4.addStep(ShellCommand(command=["make", "check"])) # Build dependencies and test, execute tests
c['builders'].append(BuilderConfig(name="utest-local", slavenames=["arm-none-eabi"], factory=f4))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","admin")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "STM32F4 Discovery Board Examples"
c['titleURL'] = "https://github.com/istarc/stm32"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
