###
# Purpose: to create a bare-metal with mbed SDK and cpputest
#
# Basic usage: make test-clean && make test-deps && make test && make check

#########################
# Configuration Options #
#########################

###
# GNU ARM Embedded Toolchain
CC=arm-none-eabi-gcc
CXX=arm-none-eabi-g++
LD=arm-none-eabi-ld
AR=arm-none-eabi-ar
AS=arm-none-eabi-as
CP=arm-none-eabi-objcopy
OD=arm-none-eabi-objdump
NM=arm-none-eabi-nm
SIZE=arm-none-eabi-size
A2L=arm-none-eabi-addr2line
GCOV=arm-none-eabi-gcov
GPROF=arm-none-eabi-gprof

###
# Directory Structure
BINDIR=bin
INCDIR=inc
SRCDIR=src
LIBDIR=lib

TBINDIR=test-bin
TSRCDIR=test-src
TCPPUTEST=test-cpputest

###
# Find source files
ASOURCES=$(shell find -L $(SRCDIR) -name '*.s')
ASOURCES+=$(shell find -L $(LIBDIR) -name '*.s')
CSOURCES=$(shell find -L $(SRCDIR) -name '*.c' -not -name 'main.c')
CSOURCES+=$(shell find -L $(LIBDIR) -name '*.c')
CSOURCES+=$(shell find -L $(TSRCDIR) -name '*.c')
CXXSOURCES=$(shell find -L $(SRCDIR) -name '*.cpp' -not -name 'main.cpp')
CXXSOURCES+=$(shell find -L $(LIBDIR) -name '*.cpp')
CXXSOURCES+=$(shell find -L $(TSRCDIR) -name '*.cpp')
# Find header directories
INC=$(shell find -L $(INCDIR) -type f -name '*.h' -exec dirname {} \; | uniq)
INC+=$(shell find -L $(LIBDIR) -type f -name '*.h' -exec dirname {} \; | uniq)
INC+=$(shell find -L $(LIBDIR) -type d -name '*include' | uniq)
INC+=$(shell find -L $(TSRCDIR) -type f -name '*.h' -exec dirname {} \; | uniq)
CPPUTEST_INCLUDES=$(INC:%=-I%)
INCLUDES=$(CPPUTEST_INCLUDES)
INCLUDES+=-I$(TCPPUTEST)/include
INCLUDES+=-include $(TCPPUTEST)/include/CppUTest/MemoryLeakDetectorNewMacros.h
INCLUDES+=-include $(TCPPUTEST)/include/CppUTest/MemoryLeakDetectorMallocMacros.h
# Find libraries
LIBFILES=$(shell find $(LIBDIR) -type f -name '*.a')
CPPUTEST_INCLUDES_LIBS=$(patsubst %,-L%, $(dir $(LIBFILES)))
INCLUDES_LIBS=$(CPPUTEST_INCLUDES_LIBS)
INCLUDES_LIBS+=-L$(TCPPUTEST)/lib
CPPUTEST_LINK_LIBS=$(patsubst lib%, -l%, $(basename $(notdir $(LIBFILES))))
LINK_LIBS=$(CPPUTEST_LINK_LIBS)
LINK_LIBS+=-lCppUTest -lCppUTestExt
# Create object list
AOBJECTS=$(ASOURCES:%.s=%.o)
COBJECTS=$(CSOURCES:%.c=%.o)
CXXOBJECTS=$(CXXSOURCES:%.cpp=%.o)
# Define output files ELF & IHEX
BINELF=test.elf
BINHEX=test.hex

###
# MCU FLAGS
MCFLAGS=-mcpu=cortex-m4 -mthumb -mlittle-endian \
-mfpu=fpv4-sp-d16 -mfloat-abi=hard -mthumb-interwork
# COMPILE FLAGS
DEFS=-DTARGET_STM32F407 -D__CORTEX_M4 -D__FPU_PRESENT -DWORDS_STACK_SIZE=200
DEFS+=-DDEVICE_SERIAL -DSTDIO_UART_TX=PC_6 -DSTDIO_UART_RX=PC_7 -DSTDIO_UART=UART_6
CFLAGS=-c $(MCFLAGS) $(DEFS) $(INCLUDES) -std=c99
CXXFLAGS=-c $(MCFLAGS) $(DEFS) $(INCLUDES) -std=c++11
CXXFLAGS+=-U__STRICT_ANSI__ # Undefine __STRICT_ANSI__ to compile Stream.cpp using c++11. This is a dirty hack!
# LINKER FLAGS
LDSCRIPT=stm32f407.ld
LDFLAGS=-T $(LDSCRIPT) $(MCFLAGS) --specs=nosys.specs $(INCLUDES_LIBS) $(LINK_LIBS)

###############
# Build Rules #
###############

##
# Build flavors
.PHONY: all
all: test-release-memopt

.PHONY: test
test: test-release-memopt

.PHONY: test-release-memopt
# Redefined functions malloc, free, new, delete should not be used with CppUTest. It also requires exeception handling to work properly, so the line below should be disabled.
test-release-memopt: CFLAGS+=-Os -ffunction-sections -fdata-sections -fno-builtin # -flto
test-release-memopt: CXXFLAGS+=-Os -ffunction-sections -fdata-sections -fno-builtin #-fno-exceptions #-fno-rtti # -flto
test-release-memopt: LDFLAGS+=-Os -Wl,-gc-sections --specs=nano.specs # -flto
test-release-memopt: test-release

.PHONY: test-debug
test-debug: CFLAGS+=-g
test-debug: CXXFLAGS+=-g
test-debug: LDFLAGS+=-g
test-debug: test-release

.PHONY: test-release
test-release: $(TBINDIR)/$(BINHEX)

##
# General build rules
$(TBINDIR)/$(BINHEX): $(TBINDIR)/$(BINELF)
	$(CP) -O ihex $< $@
	@echo "Objcopy from ELF to IHEX complete!\n"

$(TBINDIR)/$(BINELF): $(AOBJECTS) $(COBJECTS) $(CXXOBJECTS)
	$(CXX) $(AOBJECTS) $(COBJECTS) $(CXXOBJECTS) $(LDFLAGS) -o $@
	@echo "Linking complete!\n"
	$(SIZE) $(TBINDIR)/$(BINELF)

%.o: %.cpp
	$(CXX) $(CXXFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

%.o: %.c
	$(CC) $(CFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

%.o: %.s
	$(CC) $(CFLAGS) $< -o $@
	@echo "Assambled "$<"!\n"

##
# Build dependencies
# TODO CXXFLAGS+=-std=c++11 works only with -Wno-error (Dirty Hack!)
.PHONY: test-deps
test-deps: 
	cd $(TCPPUTEST) && ./configure --prefix=$(shell pwd)/$(TCPPUTEST) --host=arm-none-eabi LDFLAGS="$(MCFLAGS) --specs=nosys.specs $(CPPUTEST_INCLUDES_LIBS) $(CPPUTEST_LINK_LIBS)" CFLAGS="$(MCFLAGS) $(CPPUTEST_INCLUDES) -std=c99" CXXFLAGS="$(MCFLAGS) $(CPPUTEST_INCLUDES) -std=c++11 -Wno-error" && make clean && make # make install (src and target dir are the same) # ./autogen.sh (use this in the new release)

##
# Clean rules
.PHONY: test-clean
test-clean:
	rm -f $(AOBJECTS) $(COBJECTS) $(CXXOBJECTS) $(TBINDIR)/$(BINELF) $(TBINDIR)/$(BINHEX) $(TBINDIR)/output.map

.PHONY: test-deps-clean
test-deps-clean:
	cd $(TCPPUTEST) && make clean

################
# Check Rules #
################

##
# Unit test
# Usage: make test-clean && make test-deps && make test && make check
.PHONY: check
check:
ifeq ($(wildcard /opt/openocd/bin/openocd),)
	/usr/bin/openocd -f /usr/share/openocd/scripts/board/stm32f4discovery.cfg -c "program test-bin/"$(BINELF)" verify reset"
else
	/opt/openocd/bin/openocd -f /opt/openocd/share/openocd/scripts/board/stm32f4discovery.cfg -c "program test-bin/"$(BINELF)" verify reset"
endif

##
# Profile execution coverage
.PHONY: check-exec-coverage
check-exec-coverage:
	@echo "Not available."

##
# Profile code size
# Usage: make test-clean && make test-deps && make check-code-size
.PHONY: check-code-size
check-code-size: CFLAGS+=-g
check-code-size: CXXFLAGS+=-g
check-code-size: LDFLAGS+=-g -Wl,-Map=$(TBINDIR)/output.map
check-code-size: test-release-memopt
check-code-size:
	@echo "Top 10 space consuming symbols from the object code ...\n"
	$(NM) -A -l -C -td --reverse-sort --size-sort $(TBINDIR)/$(BINELF) | head -n10 | cat -n # Output legend: man nm
	@echo "\n... and corresponging source files to blame.\n"
	$(NM) --reverse-sort --size-sort -S -tx $(TBINDIR)/$(BINELF) | head -10 | cut -d':' -f2 | cut -d' ' -f1 | $(A2L) -e $(TBINDIR)/$(BINELF) | cat -n # Output legend: man addr2line

##
# Profile execution time
# Usage: make test-clean && make test-deps && make check-exec-time
.PHONY: check-exec-time
check-exec-time:
	test -e $(TBINDIR)/$(BINELF)
	find . -type f -name '*.gmon' -exec rm -f {} \;
ifeq ($(wildcard /opt/openocd/bin/openocd),)
	/usr/bin/openocd -f /usr/share/openocd/scripts/board/stm32f4discovery.cfg -f test-gprof.cfg
else
	/opt/openocd/bin/openocd -f /opt/openocd/share/openocd/scripts/board/stm32f4discovery.cfg -f test-gprof.cfg
endif
	$(GPROF) $(TBINDIR)/$(BINELF) gmon.out